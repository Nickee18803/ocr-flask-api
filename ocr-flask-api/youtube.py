import pyautogui
import keyboard
import pytesseract
import os
import sys
import time
import random
from PIL import ImageGrab
import youtube_login
from commentyoutube import comments
from pyautogui import click
import openai
import base64
from dotenv import load_dotenv

# ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç path ‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ import keyword_youtube ‡πÑ‡∏î‡πâ
sys.path.append(r"C:\Users\nicke\PycharmProjects\PythonProject\.venv\var")
import keyword_youtube

pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"


def parse_credentials(data):
    """ ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏à‡∏≤‡∏Å youtube_login.py ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏™‡∏î‡∏á email, password, backup_email """
    credentials = []
    for line in data.strip().split("\n"):
        parts = line.split("|")
        if len(parts) >= 3:
            email = parts[0]
            password = parts[1]
            backup_email = parts[2]
            credentials.append((email, password, backup_email))
    return credentials


def parse_keyword(data):
    """ ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡∏à‡∏≤‡∏Å keyword_youtube.py """
    keywords = [line.strip() for line in data.strip().split("\n") if line.strip()]
    return keywords

def parse_comment(data):
    return [line.strip() for line in data.strip().split("\n") if line.strip()]


class Mybot:

    def __init__(self):
        self.youtube_accounts = parse_credentials(youtube_login.data)
        self.current_email_index = 0
        self.keywords = parse_keyword(keyword_youtube.keywords)
        self.current_keyword_index = 0
        self.current_comment_index = 0
        self.comments = parse_comment(comments)
        pyautogui.FAILSAFE = False

        # Load API Key
        load_dotenv(dotenv_path="API_KEY.env")
        openai.api_key = os.getenv("OPENAI_API_KEY")

        # ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        self.bbox_list = [
            (719, 509, 1184, 547),
            (719, 896, 1184, 935),
            (719, 508, 1184, 534),
            (719, 889, 1184, 912),
            (719, 487, 1184, 510),
            (719, 868, 1184, 890),
            (719, 485, 1186, 524),
            (719, 876, 1184, 898),
        ]
        self.target_texts = ["‡∏°‡∏≤‡∏à‡∏≠‡∏á2pg", "‡∏™‡∏•‡πá‡∏≠‡∏ïpg", "‡πÅ‡∏ï‡∏Å2‡∏´‡∏°‡∏∑‡πà‡∏ô"]
        self.screenshot_folder = r"D:\\BlueStacks"


    def get_latest_screenshot(self):
        files = [os.path.join(self.screenshot_folder, f) for f in os.listdir(self.screenshot_folder) if f.endswith(".png")]
        return max(files, key=os.path.getctime) if files else None

    def ocr_image_gpt(self, filepath):
        with open(filepath, "rb") as f:
            base64_img = base64.b64encode(f.read()).decode("utf-8")

        prompt = f"""
        OCR ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡πÉ‡∏î‡∏Ñ‡∏≥‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà:
        {self.target_texts}
        ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤ \"‚úÖ ‡∏û‡∏ö\" ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° OCR
        ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤ \"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£\"
        """

        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": "‡∏ä‡πà‡∏ß‡∏¢ OCR ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ"},
                        {"type": "image_url", "image_url": f"data:image/png;base64,{base64_img}"}
                    ]
                }
            ],
            max_tokens=1000
        )
        return response['choices'][0]['message']['content']

    def process_ocr_from_blustacks(self):
        pyautogui.hotkey('ctrl', 'shift', 's')
        time.sleep(1.5)
        image_path = self.get_latest_screenshot()
        if not image_path:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏≤‡∏û‡πÅ‡∏Ñ‡∏õ")
            return False

        print(f"üì∑ ‡∏ï‡∏£‡∏ß‡∏à‡∏†‡∏≤‡∏û: {os.path.basename(image_path)}")
        result = self.ocr_image_gpt(image_path)
        print("üß† ‡∏ú‡∏• OCR:", result)

        os.remove(image_path)

        if "‚úÖ ‡∏û‡∏ö" in result:
            print("‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‚Üí ‡∏Ñ‡∏•‡∏¥‡∏Å ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà process_after_found")
            x1, y1, x2, y2 = self.bbox_list[0]
            pyautogui.click((x1 + x2) // 2, (y1 + y2) // 2)
            self.process_after_found()
            return True
        else:
            print("üîÅ ‡πÑ‡∏°‡πà‡∏û‡∏ö ‚Üí ‡∏Å‡∏î alt + down ‡πÅ‡∏•‡∏∞‡∏ß‡∏ô OCR ‡∏ï‡πà‡∏≠")
            pyautogui.hotkey('alt', 'down')
            return False


    def get_next_keyword(self):
        """ ‡∏î‡∏∂‡∏á‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß ‡πÅ‡∏•‡∏∞‡∏ß‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏£‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏î """
        if not self.keywords:
            return None
        keyword = self.keywords[self.current_keyword_index]
        self.current_keyword_index = (self.current_keyword_index + 1) % len(self.keywords)
        return keyword

    def get_next_comment(self):
        if not self.comments:
            return None
        comment = self.comments[self.current_comment_index]
        self.current_comment_index = (self.current_comment_index + 1) % len(self.comments)
        return comment


    def main_process(self):
        print("\U0001F4E2 ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô main_process()")

        time.sleep(5)
        #‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        pyautogui.click(x=800, y=333)  # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ kw
        time.sleep(3)
        keyword = self.get_next_keyword()
        print(f"\U0001F50D ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: {keyword}")
        keyboard.write(keyword, delay=0.5)
        pyautogui.press("enter")
        print("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4 ‡πÉ‡∏™‡πà‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        time.sleep(10)

        #‡∏Ñ‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå
        pyautogui.click(x=1115, y=165) #‡∏ü‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå
        time.sleep(5)
        pyautogui.click(x=815, y=222) #‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        time.sleep(5)
        pyautogui.click(x=807, y=313)  # ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
        print("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 5 setteing filter")
        time.sleep(5)

        scroll_count = 0
        max_scrolls = 100
        while scroll_count < max_scrolls:
            found = self.process_ocr_from_blustacks()
            if found:
                return True
            scroll_count += 1
        print("‚ùå ‡∏Ñ‡∏£‡∏ö 100 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")
        return False

    def process_after_found(self):

        #comment
        time.sleep(random.uniform(250, 300))
        pyautogui.click(x=1172, y=506) #‡∏Å‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
        time.sleep(3)
        pyautogui.click(x=702, y=554) #‡∏Å‡∏î‡∏ñ‡∏π‡∏Å‡πÉ‡∏à
        time.sleep(3)
        pyautogui.click(x=809, y=632) #‡∏Å‡∏î‡∏î‡∏π‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡πâ‡∏ô
        time.sleep(10)
        pyautogui.click(x=760, y=526) #‡∏Å‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡πâ‡∏ô
        time.sleep(5)

        comment = self.get_next_comment()
        print(f"üí¨ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà {self.current_comment_index}: {comment}")
        keyboard.write(comment, delay=0.5)
        print("‚úÖ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        time.sleep(3)
        pyautogui.click(x=1153, y=695) #‡∏Å‡∏î‡∏™‡πà‡∏á
        time.sleep(15)

        # ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÄ‡∏°‡∏•
        pyautogui.click(x=1155, y=998)  # ‡πÄ‡∏Ç‡πâ‡∏≤-gmail
        time.sleep(5)
        pyautogui.click(x=821, y=344)  # ‡∏™‡∏•‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
        time.sleep(5)
        pyautogui.click(x=759, y=398) # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
        print("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1 ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏•")
        time.sleep(15)

        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á
        pyautogui.click(x=1155, y=998)  # ‡πÄ‡∏Ç‡πâ‡∏≤-gmail
        time.sleep(5)
        pyautogui.click(x=945, y=559) # ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ
        time.sleep(15)
        pyautogui.click(x=815, y=650)  # ‡∏ô‡∏≥‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏≠‡∏Å
        time.sleep(5)
        pyautogui,click(x=1136, y=581) # ‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
        time.sleep(5)
        pyautogui.click(x=1128, y=636) # ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
        print("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2 ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‡∏•‡∏ö‡πÄ‡∏°‡∏•‡∏ó‡∏¥‡πâ‡∏á")
        time.sleep(15)

        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏•‡∏¥‡∏õ
        pyautogui.click(x=804, y=554)
        email, password, backup_email = self.youtube_accounts[self.current_email_index]
        self.current_email_index = (self.current_email_index + 1) % len(self.youtube_accounts)
        # ‚úÖ ‡πÉ‡∏™‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•
        print(f"\nüìß Email: {email}")
        keyboard.write(email)
        time.sleep(10)
        pyautogui.click(x=1111, y=777)  # ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        time.sleep(10)
        # ‚úÖ ‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢
        print(f"üîí Password: {password}")
        keyboard.write(password)
        time.sleep(10)
        pyautogui.click(x=1111, y=777)  # ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        print(f"‚úÖ ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏µ‡πÄ‡∏°‡∏•: {email} ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô: {password}")

        time.sleep(10)
        pyautogui.click(x=944, y=813) #‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
        print("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3 ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        time.sleep(30)

        #‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ip
        pyautogui.click(x=234, y=1057) #tab net
        time.sleep(5)
        pyautogui.click(x=978, y=368) #connect net
        time.sleep(5)
        pyautogui.click(x=770, y=501)  # connect net
        time.sleep(5)
        pyautogui.click(x=835, y=576)  # connect net
        time.sleep(5)
        pyautogui.click(x=930, y=698)  # login
        time.sleep(5)
        pyautogui.click(x=852, y=166) #‡∏Å‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        time.sleep(5)
        pyautogui.click(x=579, y=369) #system
        time.sleep(5)
        pyautogui.click(x=523, y=459) #‡∏£‡∏µ‡πÄ‡∏ô‡πá‡∏ï
        time.sleep(5)
        pyautogui.click(x=1372, y=346) #‡∏£‡∏µ‡πÄ‡∏ô‡∏±‡πá‡∏ï
        time.sleep(5)
        pyautogui.click(x=1076, y=603) #‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        time.sleep(60)
        pyautogui.hotkey('ctrl', 'w')
        time.sleep(5)
        pyautogui.click(x=510, y=165)  # home
        time.sleep(5)
        pyautogui.click(x=982, y=369)
        time.sleep(5)
        pyautogui.click(x=770, y=501)  # connect net
        time.sleep(5)
        pyautogui.click(x=835, y=576)  # connect net
        time.sleep(5)
        pyautogui.click(x=930, y=698)  # login
        time.sleep(5)
        pyautogui.click(x=510, y=165)  # home
        print(‡πÖ/"restartnet")
        time.sleep(60)

        bbox = (918, 289, 1049, 314)
        # ‡πÅ‡∏Ñ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ô‡∏±‡πâ‡∏ô
        screenshot = ImageGrab.grab(bbox=bbox).convert("L")  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥
        screenshot = screenshot.point(lambda x: 0 if x < 140 else 255)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° contrast

        # OCR ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        text = pytesseract.image_to_string(screenshot, lang="eng")
        processed_text = text.replace(" ", "").replace("\n", "").strip()

        print(f"‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö: {processed_text}")

        # ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "Disconnected" ‡πÉ‡∏´‡πâ‡∏Ñ‡∏•‡∏¥‡∏Å
        if "Disconnected" in processed_text:
            print("üîå ‡∏û‡∏ö Disconnected! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏î‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà...")
            pyautogui.click(x=982, y=369)  # ‡πÅ‡∏Å‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            time.sleep(30)
        else:
            print("‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö Disconnected, ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏õ...")
            # ‡∏ó‡∏≥‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà

        pyautogui.click(x=808, y=1054)  # blue steacks
        time.sleep(30)



if __name__ == "__main__":
    bot = Mybot()
    while bot.current_email_index < len(bot.youtube_accounts):
        bot.main_process()